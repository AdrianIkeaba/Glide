// Generated by view binder compiler. Do not edit!
package com.example.fastchat.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.fastchat.R;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityVerificationBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout constraintLayout;

  @NonNull
  public final FloatingActionButton continueFab;

  @NonNull
  public final LinearLayout linearLayout2;

  @NonNull
  public final EditText no1;

  @NonNull
  public final EditText no2;

  @NonNull
  public final EditText no3;

  @NonNull
  public final EditText no4;

  @NonNull
  public final EditText no5;

  @NonNull
  public final EditText no6;

  @NonNull
  public final TextView number;

  @NonNull
  public final CircularProgressIndicator progressBar;

  @NonNull
  public final TextView resend;

  @NonNull
  public final TextView textView;

  @NonNull
  public final TextView textView2;

  @NonNull
  public final TextView textView3;

  private ActivityVerificationBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout constraintLayout, @NonNull FloatingActionButton continueFab,
      @NonNull LinearLayout linearLayout2, @NonNull EditText no1, @NonNull EditText no2,
      @NonNull EditText no3, @NonNull EditText no4, @NonNull EditText no5, @NonNull EditText no6,
      @NonNull TextView number, @NonNull CircularProgressIndicator progressBar,
      @NonNull TextView resend, @NonNull TextView textView, @NonNull TextView textView2,
      @NonNull TextView textView3) {
    this.rootView = rootView;
    this.constraintLayout = constraintLayout;
    this.continueFab = continueFab;
    this.linearLayout2 = linearLayout2;
    this.no1 = no1;
    this.no2 = no2;
    this.no3 = no3;
    this.no4 = no4;
    this.no5 = no5;
    this.no6 = no6;
    this.number = number;
    this.progressBar = progressBar;
    this.resend = resend;
    this.textView = textView;
    this.textView2 = textView2;
    this.textView3 = textView3;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityVerificationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityVerificationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_verification, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityVerificationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      ConstraintLayout constraintLayout = (ConstraintLayout) rootView;

      id = R.id.continueFab;
      FloatingActionButton continueFab = ViewBindings.findChildViewById(rootView, id);
      if (continueFab == null) {
        break missingId;
      }

      id = R.id.linearLayout2;
      LinearLayout linearLayout2 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout2 == null) {
        break missingId;
      }

      id = R.id.no1;
      EditText no1 = ViewBindings.findChildViewById(rootView, id);
      if (no1 == null) {
        break missingId;
      }

      id = R.id.no2;
      EditText no2 = ViewBindings.findChildViewById(rootView, id);
      if (no2 == null) {
        break missingId;
      }

      id = R.id.no3;
      EditText no3 = ViewBindings.findChildViewById(rootView, id);
      if (no3 == null) {
        break missingId;
      }

      id = R.id.no4;
      EditText no4 = ViewBindings.findChildViewById(rootView, id);
      if (no4 == null) {
        break missingId;
      }

      id = R.id.no5;
      EditText no5 = ViewBindings.findChildViewById(rootView, id);
      if (no5 == null) {
        break missingId;
      }

      id = R.id.no6;
      EditText no6 = ViewBindings.findChildViewById(rootView, id);
      if (no6 == null) {
        break missingId;
      }

      id = R.id.number;
      TextView number = ViewBindings.findChildViewById(rootView, id);
      if (number == null) {
        break missingId;
      }

      id = R.id.progressBar;
      CircularProgressIndicator progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.resend;
      TextView resend = ViewBindings.findChildViewById(rootView, id);
      if (resend == null) {
        break missingId;
      }

      id = R.id.textView;
      TextView textView = ViewBindings.findChildViewById(rootView, id);
      if (textView == null) {
        break missingId;
      }

      id = R.id.textView2;
      TextView textView2 = ViewBindings.findChildViewById(rootView, id);
      if (textView2 == null) {
        break missingId;
      }

      id = R.id.textView3;
      TextView textView3 = ViewBindings.findChildViewById(rootView, id);
      if (textView3 == null) {
        break missingId;
      }

      return new ActivityVerificationBinding((ConstraintLayout) rootView, constraintLayout,
          continueFab, linearLayout2, no1, no2, no3, no4, no5, no6, number, progressBar, resend,
          textView, textView2, textView3);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
